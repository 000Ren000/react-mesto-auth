{"ast":null,"code":"import { key } from './utils.js';\n\nclass Api {\n  constructor(option) {\n    this._baseURL = option.baseURL;\n    this._headers = option.headers;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) return res.json();else return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getUserInfo() {\n    return fetch(this._baseURL + '/users/me', {\n      method: 'GET',\n      headers: this._headers\n    }).then(res => this._checkResponse(res)).then(data => data);\n  }\n\n  getCardInfo() {\n    return fetch(this._baseURL + '/cards', {\n      method: 'GET',\n      headers: this._headers\n    }).then(res => this._checkResponse(res));\n  }\n\n  setUserInfo(_ref) {\n    let {\n      name,\n      about\n    } = _ref;\n    return fetch(this._baseURL + '/users/me', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        \"name\": name,\n        \"about\": about\n      })\n    }).then(res => this._checkResponse(res));\n  }\n\n  changeAvatar(avatar) {\n    return fetch(this._baseURL + `/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        \"avatar\": avatar\n      })\n    }).then(res => this._checkResponse(res));\n  }\n\n  setNewCardInfo(_ref2) {\n    let {\n      name,\n      link\n    } = _ref2;\n    return fetch(this._baseURL + '/cards', {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        \"name\": name,\n        \"link\": link\n      })\n    }).then(res => this._checkResponse(res));\n  }\n\n  deleteCard(cardId) {\n    return fetch(this._baseURL + `/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._checkResponse(res));\n  }\n\n  _likedCard(cardId) {\n    return fetch(this._baseURL + `/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(res => this._checkResponse(res));\n  }\n\n  _unlikedCard(cardId) {\n    return fetch(this._baseURL + `/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._checkResponse(res));\n  }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    return !isLiked ? this._likedCard(cardId) : this._unlikedCard(cardId);\n  }\n\n} // Создание Апи\n\n\nexport const api = new Api({\n  baseURL: 'https://nomoreparties.co/v1/cohort-41',\n  headers: key\n});","map":{"version":3,"names":["key","Api","constructor","option","_baseURL","baseURL","_headers","headers","_checkResponse","res","ok","json","Promise","reject","status","getUserInfo","fetch","method","then","data","getCardInfo","setUserInfo","name","about","body","JSON","stringify","changeAvatar","avatar","setNewCardInfo","link","deleteCard","cardId","_likedCard","_unlikedCard","changeLikeCardStatus","isLiked","api"],"sources":["/Users/antonfondov/Ya_Project/mesto-react/src/utils/Api.js"],"sourcesContent":["import {key} from './utils.js';\nclass Api {\n  constructor(option) {\n    this._baseURL = option.baseURL;\n    this._headers = option.headers;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) return res.json();\n    else return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getUserInfo() {\n    return fetch(this._baseURL+'/users/me', {\n      method: 'GET',\n      headers: this._headers\n    })\n        .then(res => this._checkResponse(res)).then(data => data)\n  }\n  getCardInfo() {\n    return fetch(this._baseURL+'/cards', {\n      method: 'GET',\n      headers: this._headers\n    })\n      .then(res => this._checkResponse(res));\n  }\n\n  setUserInfo({name, about}) {\n    return fetch(this._baseURL+'/users/me', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        \"name\": name,\n        \"about\": about\n      })\n    })\n      .then(res => this._checkResponse(res));\n  }\n\n  changeAvatar(avatar) {\n    return fetch(this._baseURL+`/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        \"avatar\": avatar,\n      })\n    }).then(res => this._checkResponse(res));\n  }\n\n  setNewCardInfo({name, link}) {\n    return fetch(this._baseURL+'/cards', {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        \"name\": name,\n        \"link\": link\n      })\n    })\n      .then(res => this._checkResponse(res));\n  }\n\n  deleteCard(cardId) {\n    return fetch(this._baseURL+`/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._checkResponse(res));\n  }\n\n  _likedCard(cardId) {\n    return fetch(this._baseURL+`/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(res => this._checkResponse(res));\n  }\n\n  _unlikedCard(cardId) {\n    return fetch(this._baseURL+`/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._checkResponse(res));\n  }\n\n\n\tchangeLikeCardStatus(cardId, isLiked) {\n    return !isLiked ? this._likedCard(cardId) : this._unlikedCard(cardId);\n\t}\n}\n\n\n// Создание Апи\nexport const api = new Api({\n  baseURL: 'https://nomoreparties.co/v1/cohort-41',\n  headers: key\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}